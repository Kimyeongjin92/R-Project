library(dplyr)
library(ggplot2)
library(stringr)
clementine %>%
group_by(점수) %>%
summarise(갯수=n()) %>%
ggplot(aes(x=as.factor(점수), y=갯수, fill=as.factor(점수)))+
geom_bar(stat="identity",color="black") +
theme_bw(base_family='baedal',
base_size = 10,
base_rect_size = 4,
base_line_size = 1) +
labs(x='점수') +
ggtitle('클레멘타인 평점별 댓글수') +
theme(legend.position = "none",
axis.text.x  = element_text(angle=45, hjust=1),
plot.title = element_text(family="baedal",
face = "bold",
hjust = 0.5,
vjust = 1,
size = 18,
color = "black"))
clementine %>%
group_by(점수) %>%
summarise(갯수=n()) %>%
ggplot(aes(x=as.factor(점수), y=갯수, fill=as.factor(점수)))+
geom_bar(stat="identity",color="black") +
theme_bw(base_family='baedal',
base_size = 10,
base_rect_size = 4,
base_line_size = 1) +
labs(x='점수') +
ggtitle('클레멘타인 평점별 댓글수') +
theme(legend.position = "none",
axis.text.x  = element_text(angle=45, hjust=1),
plot.title = element_text(family="baedal",
face = "bold",
hjust = 0.5,
vjust = 1,
size = 18,
color = "black"))
clementine %>%
group_by(점수) %>%
summarise(갯수=n()) %>%
ggplot(aes(x=as.factor(점수), y=갯수, fill=as.factor(점수)))+
geom_bar(stat="identity",color="black") +
theme_bw(base_family='baedal',
base_size = 10,
base_rect_size = 4,
base_line_size = 1) +
labs(x='점수') +
ggtitle('클레멘타인 평점별 댓글수') +
theme(legend.position = "none",
plot.title = element_text(family="baedal",
face = "bold",
hjust = 0.5,
vjust = 1,
size = 18,
color = "black"))
windowsFonts(baedal=windowsFont("배달의민족 도현"))
clementine %>%
group_by(점수) %>%
summarise(갯수=n()) %>%
ggplot(aes(x=as.factor(점수), y=갯수, fill=as.factor(점수)))+
geom_bar(stat="identity",color="black") +
theme_bw(base_family='baedal',
base_size = 10,
base_rect_size = 4,
base_line_size = 1) +
labs(x='점수') +
ggtitle('클레멘타인 평점별 댓글수') +
theme(legend.position = "none",
plot.title = element_text(family="baedal",
face = "bold",
hjust = 0.5,
vjust = 1,
size = 18,
color = "black"))
lementine %>%
group_by(점수) %>%
summarise(갯수=n()) %>%
ggplot(aes(x=as.factor(점수), y=갯수, fill=as.factor(점수)))+
geom_bar(stat="identity",color="black") +
geom_text(aes(y=갯수+100,label=paste0(갯수,"개")),
color='black',
size=2.5,
family="baedal") +
theme_bw(base_family='baedal',
base_size = 10,
base_rect_size = 4,
base_line_size = 1) +
labs(x='점수') +
ggtitle('클레멘타인 평점별 댓글수') +
theme(legend.position = "none",
plot.title = element_text(family="baedal",
face = "bold",
hjust = 0.5,
vjust = 1,
size = 18,
color = "black"))
clementine %>%
group_by(점수) %>%
summarise(갯수=n()) %>%
ggplot(aes(x=as.factor(점수), y=갯수, fill=as.factor(점수)))+
geom_bar(stat="identity",color="black") +
geom_text(aes(y=갯수+100,label=paste0(갯수,"개")),
color='black',
size=2.5,
family="baedal") +
theme_bw(base_family='baedal',
base_size = 10,
base_rect_size = 4,
base_line_size = 1) +
labs(x='점수') +
ggtitle('클레멘타인 평점별 댓글수') +
theme(legend.position = "none",
plot.title = element_text(family="baedal",
face = "bold",
hjust = 0.5,
vjust = 1,
size = 18,
color = "black"))
clementine %>%
group_by(점수) %>%
summarise(갯수=n()) %>%
ggplot(aes(x=as.factor(점수), y=갯수, fill=as.factor(점수)))+
geom_bar(stat="identity",color="black") +
geom_text(aes(y=갯수+1000,label=paste0(갯수,"개")),
color='black',
size=5,
family="baedal") +
theme_bw(base_family='baedal',
base_size = 10,
base_rect_size = 4,
base_line_size = 1) +
labs(x='점수') +
ggtitle('클레멘타인 평점별 댓글수') +
theme(legend.position = "none",
plot.title = element_text(family="baedal",
face = "bold",
hjust = 0.5,
vjust = 1,
size = 18,
color = "black"))
clementine %>%
group_by(점수) %>%
summarise(갯수=n()) %>%
ggplot(aes(x=as.factor(점수), y=갯수, fill=as.factor(점수)))+
geom_bar(stat="identity",color="black") +
geom_text(aes(y=갯수+1000,label=갯수),
color='black',
size=5,
family="baedal") +
theme_bw(base_family='baedal',
base_size = 10,
base_rect_size = 4,
base_line_size = 1) +
labs(x='점수') +
ggtitle('클레멘타인 평점별 댓글수') +
theme(legend.position = "none",
plot.title = element_text(family="baedal",
face = "bold",
hjust = 0.5,
vjust = 1,
size = 18,
color = "black"))
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=육아부담" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100%start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
install.packages("httr")
library(httr)
clientid <- "*****" # 개인 api id 값
clientSecret <- "*****" # 개인 apu secret 값
clientid <- "4G2RGMvLhIChMLs3Cuy2" # 개인 api id 값
clientSecret <- "aRNbIYdwuX" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
install.packages("httr")
#install.packages("httr")
library(httr)
clientid <- "4G2RGMvLhIChMLs3Cuy2" # 개인 api id 값
clientSecret <- "aRNbIYdwuX" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
reqUrl # 요청할 url 생성
#install.packages("httr")
library(httr)
clientid <- "4G2RGMvLhIChMLs3Cuy2" # 개인 api id 값
clientSecret <- "aRNbIYdwuX" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
clientid <- "4G2RGMvLhIChMLs3Cuy2" # 개인 api id 값
clientSecret <- "aRNbIYdwuX" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
clientid <- "4G2RGMvLhIChMLs3Cuy2" # 개인 api id 값
clientSecret <- "1GJEhlh2oH" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=육아" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
#install.packages("httr")
library(httr)
clientid <- "4G2RGMvLhIChMLs3Cuy2" # 개인 api id 값
clientSecret <- "1GJEhlh2oH" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=육아" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
#install.packages("httr")
library(httr)
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=육아부담" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
#install.packages("httr")
library(httr)
clientid <- "054n6IEfBZCo9_YTAgR7" # 개인 api id 값
clientSecret <- "BejMyaYzl0" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
gsub("ABC", "***", "ABCabcABC", ignore.case = T)
x <- c("ABCabcABC", "abcABCabc")
gsub("ABC". "***", x)
gsub("ABC", "***", x)
gsub("ABC", "***", "i love banana")
refineStr <- result
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", refineStr)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
library(rJava)
library(KoNLP)
library(dplyr)
library(ggplot2)
useSejongDic()
nouns <- extractNoun(refineStr)
nouns
str(nouns)
head(nouns, 40)
nouns <- nouns[nchar(nouns) > 1]
wordT <- sort(table(nouns), decreasing = T)[1:50]
wordT
nouns2 <- gsub("육아", " ", nouns)
nouns2 <- gsub("부담", " ", nouns)
nouns2 <- gsub("보육", " ", nouns)
nouns2 <- gsub("부모", " ", nouns)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
library(wordcloud2)
wordcloud2(wordT, size=3, shape='diamond')
wordcloud2(wordT, size=3, shape='diamond')
nouns2 <- gsub("육아", " ", nouns)
nouns2 <- gsub("부담", " ", nouns)
nouns2 <- gsub("보육", " ", nouns)
nouns2 <- gsub("부모", " ", nouns)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
nouns2 <- gsub("부담", " ", nouns2)
nouns2 <- gsub("보육", " ", nouns2)
nouns2 <- gsub("부모", " ", nouns2)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
nouns2 <- gsub("육아", " ", nouns2)
nouns2 <- gsub("부담", " ", nouns2)
nouns2 <- gsub("보육", " ", nouns2)
nouns2 <- gsub("부모", " ", nouns2)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
library(wordcloud2)
wordcloud2(wordT, size=3, shape='diamond')
wordcloud2(wordT, size=1, shape='diamond')
wordcloud2(wordT, size=0.01, shape='diamond')
wordcloud2(wordT, size=0.5, shape='diamond')
result
refineStr
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=육아" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
#install.packages("httr")
library(httr)
clientid <- "054n6IEfBZCo9_YTAgR7" # 개인 api id 값
clientSecret <- "BejMyaYzl0" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
refineStr <- result
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", refineStr)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
refineStr
library(rJava)
library(KoNLP)
library(dplyr)
library(ggplot2)
useSejongDic()
nouns <- extractNoun(refineStr)
str(nouns)
head(nouns, 40)
nouns2 <- gsub("육아", " ", nouns2)
nouns2 <- gsub("부담", " ", nouns2)
nouns2 <- gsub("보육", " ", nouns2)
nouns2 <- nouns
nouns2 <- gsub("보육", " ", nouns2)
nouns2 <- gsub("육아", " ", nouns2)
nouns2 <- gsub("부모", " ", nouns2)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
nouns2 <- gsub("부모", " ", nouns2)
nouns2 <- gsub("엄마", " ", nouns2)
nouns2 <- gsub("아빠", " ", nouns2)
nouns2 <- gsub("오늘", " ", nouns2)
nouns2 <- gsub("^ㅎ", " ", nouns2)
nouns2 <- gsub("^ㅋ^ㅋ^ㅋ^ㅋ^ㅋ", " ", nouns2)
nouns2 <- gsub("아기", " ", nouns2)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
nouns2 <- gsub("아이", " ", nouns2)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
library(wordcloud2)
wordcloud2(wordT, size=0.5, shape='diamond')
nouns2 <- gsub("^ㅋ^ㅋ^ㅋ^ㅋ^ㅋ", " ", nouns2)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
nouns2 <- gsub(" ^ㅋ^ㅋ^ㅋ^ㅋ^ㅋ", " ", nouns2)
nouns2 <- gsub("아기", " ", nouns2)
nouns2 <- gsub("아이", " ", nouns2)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
nouns2 <- gsub("^ㅋ^ㅋ^ㅋ^ㅋ^ㅋ", " ", nouns2)
nouns2 <- gsub("아기", " ", nouns2)
nouns2 <- gsub("아이", " ", nouns2)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
wordcloud2(wordT, size=0.5, shape='diamond')
refineStr
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
install.packages('tm')
library(tm)
cps <- Corpus(VectorSource(nouns2))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
cps <- Corpus(VectorSource(nouns2))
tdm <- TermDocumentMatrix(cps)
as.matrix(tdm)
findAssocs(tdm, "oil", 0.7)
findAssocs(tdm, "휴직", 0.7)
str(as.matrix(tdm))
findAssocs(tdm, "휴직", 0.3)
refineStr
tdm <- TermDocumentMatrix(refineStr)
cps <- Corpus(VectorSource(refineStr))
tdm <- TermDocumentMatrix(cps)
str(as.matrix(tdm))
findAssocs(tdm, "휴직", 0.3)
refineStr
cps <- Corpus(VectorSource(refineStr))
tdm <- TermDocumentMatrix(cps)
str(as.matrix(tdm))
findAssocs(tdm, "휴직", 0.3)
as.matrix(tdm)
findAssocs(tdm, "휴직", 0.3)
refineStr
result
class(refineStr)
typeof(refineStr)
urlStr <- "https://openapi.naver.com/v1/search/blog.xml?" # 기본 url 생성
searchString <- "query=육아" # 쿼리생성
searchString <- iconv(searchString, to="UTF-8") # 인코딩
searchString <- URLencode(searchString)
searchString
etcString <- "&display=100&start=1&sort=sim"
reqUrl <- paste(urlStr, searchString, etcString, sep="")
reqUrl # 요청할 url 생성
#install.packages("httr")
library(httr)
clientid <- "054n6IEfBZCo9_YTAgR7" # 개인 api id 값
clientSecret <- "BejMyaYzl0" # 개인 apu secret 값
apiResult <- GET(reqUrl, add_headers("X-Naver-Client-Id"=clientid,
"X-Naver-Client-Secret"=clientSecret))
apiResult # Status 값이 200이어야 정상. 500 이면 시스템 에러
str(apiResult)
apiResult$content
result <- rawToChar(apiResult$content)
result
Encoding(result) <- "UTF-8"
result
refineStr <- result
refineStr <- gsub("<(\\/?)(\\w+)*([^<>]*)>", " ", refineStr)
refineStr <- gsub("[[:punct:]]", " ", refineStr)
refineStr <- gsub("[a-z]", " ", refineStr)
refineStr <- gsub("[0-9]", " ", refineStr)
refineStr <- gsub(" +", " ", refineStr)
typeof(refineStr)
library(rJava)
library(KoNLP)
library(dplyr)
library(ggplot2)
useSejongDic()
nouns <- extractNoun(refineStr)
str(nouns)
nouns2 <- nouns
nouns2 <- gsub("육아", " ", nouns2)
nouns2 <- gsub("보육", " ", nouns2)
nouns2 <- gsub("부모", " ", nouns2)
nouns2 <- gsub("엄마", " ", nouns2)
nouns2 <- gsub("아빠", " ", nouns2)
nouns2 <- gsub("오늘", " ", nouns2)
nouns2 <- gsub("^ㅎ", " ", nouns2)
nouns2 <- gsub("^ㅋ^ㅋ^ㅋ^ㅋ^ㅋ", " ", nouns2)
nouns2 <- gsub("아기", " ", nouns2)
nouns2 <- gsub("아이", " ", nouns2)
nouns2 <- nouns2[nchar(nouns2) > 1]
wordT <- sort(table(nouns2), decreasing = T)[1:50]
wordT
library(wordcloud2)
wordcloud2(wordT, size=0.5, shape='diamond')
